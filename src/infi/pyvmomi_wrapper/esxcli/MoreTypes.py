from pyVmomi.VmomiSupport import CreateDataType,  CreateManagedType,  CreateEnumType,  AddVersion,  AddVersionParent,  F_LINK,  F_LINKABLE,  F_OPTIONAL


#### Ugly hack to patch to add internal methods to vim.HostSystem

from pyVmomi import vim
from pyVmomi.VmomiSupport import Capitalize, ManagedMethod, GetWsdlNamespace, LazyObject
from pyVmomi.VmomiSupport import _SetWsdlMethod, _dependencyMap
def AddWsdlMethod(_type, mVmodl, mWsdl, mVersion, mParams, mResult, mPrivilege, mFaults):
    vmodlName = _type.__name__

    if mFaults is None:
        mFaults = []
    mName = Capitalize(mVmodl)
    params = tuple([LazyObject(name=p[0], typeName=p[1], version=p[2], flags=p[3],
                    privId=p[4]) for p in mParams])
    info = LazyObject(name=mName, typeName=vmodlName, wsdlName=mWsdl,
                      version=mVersion, params=params, isTask=False,
                      resultFlags=mResult[0], resultName=mResult[1],
                      methodResultName=mResult[2], privId=mPrivilege, faults=mFaults)
    mm = ManagedMethod(info)
    ns = GetWsdlNamespace(info.version)
    method = _SetWsdlMethod(ns, info.wsdlName, mm)
    _type._methodInfo[mName] = info
    setattr(_type, mWsdl, mm)
    _dependencyMap[vmodlName].add(info.wsdlName)

for patch in [
  ("retrieveManagedMethodExecuter", "RetrieveManagedMethodExecuter", "vim.version.version7", (), (F_OPTIONAL, "vmodl.reflect.ManagedMethodExecuter", "vmodl.reflect.ManagedMethodExecuter"), "System.Read", None),
  ('retrieveDynamicTypeManager', 'RetrieveDynamicTypeManager', 'vim.version.version7', (), (F_OPTIONAL, 'vmodl.reflect.DynamicTypeManager', 'vmodl.reflect.DynamicTypeManager'), 'System.Read', None)]:
  AddWsdlMethod(vim.HostSystem, *patch)

####

# new names used by MMESoapStubAdapter. The VMware package where ReflectTypes was taken from uses "Executer" in MMESoapStubAdapter but pyvmomi's class uses "Executor"
CreateDataType("vmodl.Reflect.ManagedMethodExecutor.SoapArgument", "ReflectManagedMethodExecuterSoapArgument", "vmodl.DynamicData", "vmodl.reflect.version.version1", [("name", "string", "vmodl.reflect.version.version1", 0), ("val", "string", "vmodl.reflect.version.version1", 0)])
CreateDataType("vmodl.Reflect.ManagedMethodExecutor.SoapFault", "ReflectManagedMethodExecuterSoapFault", "vmodl.DynamicData", "vmodl.reflect.version.version1", [("faultMsg", "string", "vmodl.reflect.version.version1", 0), ("faultDetail", "string", "vmodl.reflect.version.version1", F_OPTIONAL)])
CreateDataType("vmodl.Reflect.ManagedMethodExecutor.SoapResult", "ReflectManagedMethodExecuterSoapResult", "vmodl.DynamicData", "vmodl.reflect.version.version1", [("response", "string", "vmodl.reflect.version.version1", F_OPTIONAL), ("fault", "vmodl.reflect.ManagedMethodExecuter.SoapFault", "vmodl.reflect.version.version1", F_OPTIONAL)])


# the following code is autogenerated using tools/generate_cli_types.py
# DO NOT EDIT


try:
  CreateDataType("vim.vsan.DataEfficiencyConfig", "VsanDataEfficiencyConfig", "vmodl.DynamicData", "vim.version.version10", [("dedupEnabled", "boolean", "vim.version.version10", F_OPTIONAL), ("compressionEnabled", "boolean", "vim.version.version10", F_OPTIONAL)])
  CreateDataType("vim.host.VsanProactiveRebalanceInfo", "VimHostVsanProactiveRebalanceInfo", "vmodl.DynamicData", "vim.version.version10", [("running", "boolean", "vim.version.version10", F_OPTIONAL), ("startTs", "vmodl.DateTime", "vim.version.version10", F_OPTIONAL), ("stopTs", "vmodl.DateTime", "vim.version.version10", F_OPTIONAL), ("varianceThreshold", "float", "vim.version.version10", F_OPTIONAL), ("timeThreshold", "int", "vim.version.version10", F_OPTIONAL), ("rateThreshold", "int", "vim.version.version10", F_OPTIONAL)])
  CreateDataType("vim.vsan.host.IpConfigEx", "VsanHostIpConfigEx", "vim.vsan.host.IpConfig", "vim.version.version11", [("upstreamIpV6Address", "string", "vim.version.version11", F_OPTIONAL), ("downstreamIpV6Address", "string", "vim.version.version11", F_OPTIONAL)])
  CreateDataType("vim.vsan.host.PortConfigEx", "VsanHostPortConfigEx", "vim.vsan.host.ConfigInfo.NetworkInfo.PortConfig", "vim.version.version11", [("trafficTypes", "vim.vsan.host.TrafficType[]", "vim.version.version11", F_OPTIONAL)])
except KeyError:
  # vim.version.version10 comes from vSphere 6.0, and does not have it yet
  pass

